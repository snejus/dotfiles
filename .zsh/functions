##### GENERAL #####

RED='1;31'
GREEN='1;32'
YELLOW='1;33'
BLUE='1;34'
MAGENTA='1;35'
AQUA='1;36'
WHITE='1;37'
# BLUE='1;38' same blue
GREY='1;39'

_newpassword () {
    bw generate -uln --length 30
}

bwgenpass () {
    copyq disable 2> /dev/null
    _newpassword | ci
    copyq enable 2> /dev/null
}

bwgetpass () {
    copyq disable 2> /dev/null
    bw get password $1 | ci
    copyq enable 2> /dev/null
}

bwcreate () {
    bw create $1 $(echo "$2" | bw encode)
}

bwcreatesecret () {
    bwcreate item "$(bw get template item | jq \
       ".folderId = $(bw get folder Secrets | jq .id) | \
        .name = \"$1\" | \
        .notes = \"$(base64 -w 0 $2)\" | \
        .login = \"\"")"
}

bwgetsecret () {
    base64 --decode <(bw get item $1 | jq '.notes' | tr -d \")
}

bwcreatelogin () {
    pw="$(_newpassword)"
    template="$(bw get template item)"
    bwcreate item "$template | jq \
       ".name = \"$1\" | \
        .login = {\"username\" = \"$2\", \"password\" = \"$pw\"}")"
    echo $pw | ci
}


du_sort() { du -hd 1 $1 | sort -h }
mcd () { mkdir $1 cd $1 }
locatel() { locate $@ | xargs exa -lah }
locateconf() { locate $1 | sed '/\.conf$/!d' }
whichl() { exa -lah "$(which $1)" }
shrinkmp4() { ffmpeg -i $1 -vcodec libx265 -crf 2 $2 }

dadjoke() {
   echo "\
$1$1$1$1$1$1$1$1$1$1$1$1$1$1$1$1$1
$1$2$1$2$1$1$2$1$1$2$1$2$1$1$2$1$1
$1$2$1$2$1$2$1$2$1$2$1$2$1$2$1$2$1
$1$2$2$2$1$2$2$2$1$2$2$2$1$2$2$2$1
$1$2$1$2$1$2$1$2$1$2$1$2$1$2$1$2$1
$1$2$1$2$1$2$1$2$1$2$1$2$1$2$1$2$1
$1$1$1$1$1$1$1$1$1$1$1$1$1$1$1$1$1"
}
dadjoke4sam() {
   echo "\
$1$1$1$1$1$1$1$1$1$1$1$1$1
$1$1$1$2$1$2$1$1$2$1$1$1$1
$1$1$1$2$1$2$1$2$1$2$1$1$1
$1$1$1$2$2$2$1$2$2$2$1$1$1
$1$1$1$2$1$2$1$2$1$2$1$1$1
$1$1$1$2$1$2$1$2$1$2$1$1$1
$1$1$1$1$1$1$1$1$1$1$1$1$1"
}


##### PYTHON #####
cache_purge() {
    remove_file_folder f .coverage $1
    remove_file_folder d __pycache__ $1
    remove_file_folder d .pytest_cache $1
    remove_file_folder d .eggs $1
    remove_file_folder d build $1
    remove_file_folder d dist $1
    remove_file_folder d "*.egg-info" $1
    echo Finished removing caches
}

remove_file_folder() {
    count=0
    for file in $(find . -name $2 -type $1);
    do
        rm -rf $file $3
    let "count++"
    done
    if [ $count -gt 0 ]; then
        echo "- Removed $count $2"
    fi
}

depopen() {
    echo Opening $1 repository in the browser
    xdg-open $(pip show $1 | sed -n 's/^.*\(.*github\)/\1/p')
}

deps() {
    echo Generating pydeps dependencies graph for $1
    pydeps $1 --reverse -T png
}

cdeps() {
    echo Looking for circular dependencies for $1
    pydeps $1 --show-cycles
}

restshow() { restview --css ~/.ref/github.css $1 }
runmypy() { mypy $1 --html-report mypy --show-traceback --pretty }

search_skipped() {
    ag --nogroup --color --color-path $AQUA $1 tests src | \
        tee /dev/null | \
        sed 's/:.*//' | \
        tee >(wc -l) >(printf '\n\e[%smTOTAL: ' "$YELLOW") | \
        sort | uniq -c | sort -r
}

skipped_flake() { search_skipped 'noqa|flake8' }
skipped_pylint() { search_skipped 'pylint: ?d' }
skipped_mypy() { search_skipped 'type: ignore' }

skipped_pylint_by_error() {
    ag --nogroup --color --color-path '1;36' 'pylint: ?dis' tests src |
    tee /dev/null |
    sed 's/.*able\ \?=\ \?//' | tr , '\n' | tr -d ' ' |
    tee >(wc -l) >(printf '\e[%smTOTAL: \e[%sm' $MAGENTA $GREY) |
    sort | uniq -c | sort -rh
}

##### DOCKER #####

dockerstop () {
    echo Killing every container which mentions $1
    docker ps --filter name=$1 | xargs -I{} docker stop {}
}

docker_noname_image_ids() { docker images -a | grep "<none>" | tr -s ' ' | cut -d ' ' -f3 }
docker_delete_noname_images() { docker_noname_image_ids | xargs docker image rm }


##### GENERAL TEXT PROCESSING #####
flushright() { sed -e :a -e 's/^.\{1,78\}$/ &/;ta' }
center() { sed  -e :a -e 's/^.\{1,77\}$/ &/;ta' -e 's/\( *\)\1/\1/' }

##### CONVERSION BETWEEN FORMATS #####
rst2md() {
    local filename=$1:t
    local naked=$filename:r
    local output=$naked.md
    echo Converting $filename to $output
    pandoc $filename \
        -s \
        --from rst \
        --to gfm \
        -o $output \
        --toc \
        --toc-depth 2
}

pandoc2pdf() {
    local filename=$1:t
    local from=$2
    local naked=$filename:r
    local output=$naked.pdf
    echo Converting $filename to $output
    pandoc $filename \
        -s \
        -f $from \
        -o $output \
        -V geometry:margin=1.4in \
        --toc \
        --toc-depth 2 \
        --pdf-engine=xelatex \
        --highlight-style=$HOME/.d/sarastango.theme \
        --variable=fontsize:10pt
}
rst2pdf() { pandoc2pdf $1 rst }
md2pdf() {
   local tmp=_$1
   cat $1 | sed '/vim-markdown/,/vim-markdown/d' | # swap toc and remove dropdowns
      sed '/details\|summary/d' > $tmp
   pandoc2pdf $tmp gfm
   rm $tmp
}
# vim:ft=bash
