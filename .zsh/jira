# Jira
# TODO: Use json for normal lists too, not just dependencies
# TODO: Tidy up all aliases
# TODO: Apply plain style for Done

BLACK='\\\\e[1;40;40m&\\\\e[0m'
RED='\\\\e[1;31m&\\\\e[0m'
RED_IT='\\\\e[1;41m&\\\\e[0m'
GREEN_IT='\\\\e[1;3;38;5;150m&\\\\e[0m'
GREEN='\\\\e[1;38;5;150m&\\\\e[0m'
YELLOW='\\\\e[1;33m&\\\\e[0m'
BLUE='\\\\e[1;34m&\\\\e[0m'
BLUE0='\\\\e[0;34m&\\\\e[0m'
MAGENTA='\\\\e[1;35m&\\\\e[0m'
CYAN='\\\\e[1;36m&\\\\e[0m'
GREY='\\\\e[1;37m&\\\\e[0m'
WHITE='\\\\e[1;38m&\\\\e[0m'
ORANGE='\\\\e[1;38;5;208m&\\\\e[0m'


_colorfilter() {
    sed "2s/Is.*/$GREEN_IT/; 
        s/[A-Z]\+-[0-9]\+/$WHITE/g;
        s/Story/$GREEN/; 
        s/Question/$CYAN/; 
        s/Task/$BLUE/; 
        s/Sub-task/$BLUE0/;
        s/Bug/$RED/; 
        s/Incident/$YELLOW/; 
        s/Epic/$MAGENTA/;
        s/High\ /$RED/; 
        s/Highest/$RED_IT/; 
        s/Medium/$ORANGE/; 
        s/Backlog/$BLACK/; 
        s/To Do/$WHITE/; 
        s/Investigating/$YELLOW/;
        s/In Progress/$GREEN/;
        s/Review/$BLUE/;
        s/Testing/$MAGENTA/;
        s/Done/$GREY/" |
        xargs -I{} echo -e {}
}

_position_nicely() {
    sed 's/^/      &/' |  # spacing on the left
    sed '1i \\a' |      # top padding
    sed '$a \\n'        # bottom padding
}

_beautify() {
    sed "s/[-+]\?\+-[^0-9a-zA-Z]//" |
    tr '\t' ' ' |       # tabs -> spaces
    tr -s " " |         # multiple spaces -> single space
    sed '/| |/d' |      # remove the extra bits between headers and values
    sed '/Reporter/!s/ [A-za-z]* |$/ |/' |  # remove surnames
    _colorfilter |
    sed '2i \\a' |      # separation between the headers and the data
    column -s "|" -t |
    _position_nicely
}

_printissues() {
    jira list --template table --query $1 | _beautify 
}

_printepics() {
    jira list --template epic-list --query $1 | _beautify
}

jlsea() {
    _printepics "\
        resolution = unresolved and type=Epic and project=COR \
        ORDER BY status DESC, priority DESC, created DESC"
}

jlse() {
    _printepics "\
        resolution = unresolved and assignee=currentuser() and type=Epic \
        ORDER BY status DESC, priority DESC, created DESC"
}

jels() {
    jira epic list "$(_make_label $1)" | _beautify
}

jls() {
    _printissues "\
        resolution = unresolved and assignee=currentuser()
        ORDER BY type ASC, priority DESC, status"
}

jlsa() {
    _printissues "\
        assignee=currentuser() 
        ORDER BY status DESC, priority DESC, created DESC"
}

_to_table() {
    ncols=$(( $(tput cols) - 3 ))
    jq -r '.[] | ({ key: .key}) + { nature: (.links | keys)} + .links[] | flatten | @sh' |
        sed "s/' \+'/';'/g" | 
            column -t -s ";" -T 3 -c $ncols | 
            tr -d "'" | _colorfilter | _position_nicely
}

_links () {
    jira list --queryfields=issuelinks --query "$1 \
        resolution = unresolved and assignee=currentuser()
        ORDER BY type, status DESC, priority DESC" -t debug | 
            jq '[ .issues[] | 
                { key, links: .fields.issuelinks[] | 
                    { (.type.inward): (.inwardIssue // .outwardIssue | 
                        { ticket: (.key + " " + .fields.summary), 
                          type: .fields.issuetype.name, 
                          priority: .fields.priority.name, 
                          status: .fields.status.name } ) } } ]' | _to_table
}

jlselinks () {
    _links 'type = Epic and'
}

jlslinks () {
    _links
}
# vim:ft=bash
