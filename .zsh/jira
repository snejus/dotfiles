# Jira

_make_label () {
    echo "$1" | sed 's/^[0-9]/COR-&/'
}

jiip () {
    jira in-progress "$(_make_label $1)"
}

jire () {
    jira transition Review "$(_make_label $1)"
}

jite () {
    jira transition Testing "$(_make_label $1)"
}

jio () {
    xdg-open "$SUBDOMAIN/browse/$(_make_label $1)"
}

jifields () {
    jira fields | grep system | sed "s/.*: //" | tr -d \", | sort
}

jshow() {
    jira view "$(_make_label $1)" | pygmentize -l yaml -O style=monokai
}

alias jinfo=jshow
alias jsh=jshow

_colorfilter() {
    sed '2s/Is.*/\\\\e[1;3;32m&\\\\e[0m/; # green bold italic headers
        s/[A-Z]\+-[0-9]\+/\\\\e[1;37m&\\\\e[0m/; # white issue label
        s/Story/\\\\e[1;32m&\\\\e[0m/; # bold green
        s/Sub-task/\\\\e[1;34m&\\\\e[0m/; # bold blue
        s/Bug/\\\\e[1;31m&\\\\e[0m/; # bold red
        s/Incident/\\\\e[1;33m&\\\\e[0m/; # bold yellow
        s/Epic/\\\\e[1;38;5;99m&\\\\e[0m/; # bold violet
        s/High\ /\\\\e[1;31m&\\\\e[0m/; # bold red
        s/Highest/\\\\e[5;38;5;124m&\\\\e[0m/; # bold redder
        s/Medium/\\\\e[1;38;5;208m&\\\\e[0m/; # bold orange
        s/Low/\\\\e[1;33m&\\\\e[0m/'
}

_beautify() {
    sed "s/[-+]\?\+-[^0-9a-zA-Z]//" |
    tr '\t' ' ' |       # tabs -> spaces
    tr -s " " |         # multiple spaces -> single space
    sed '/| |/d' |      # remove the extra bits between headers and values
    cut -d "|" -f-8 |   # remove `Assigned` column
    _colorfilter |
    xargs -I{} echo -e "  {}" |
    column -s "|" -t |
    sed '2i \\a' |      # separation between the headers and the data
    sed '1i \\a' |      # top padding
    sed '$a \\n'        # bottom padding
}

_printissues() {
    jira list --template table --query $1 | _beautify
}

issues() {
    _printissues "\
        resolution = unresolved and assignee=currentuser() \
        ORDER BY status DESC, priority DESC, created DESC"
}
alias iss='issues'

allissues() {
    _printissues "\
        sprint in openSprints() and assignee=currentuser() \
        ORDER BY status DESC, priority DESC, created DESC"
}

sissues() {
    _printissues "\
        sprint in openSprints() and \
        resolution=unresolved and assignee=currentuser() \
        ORDER BY status DESC, priority DESC, created DESC"
}

# issues() {
    # local sortopts
    # echo $sorter
    # case "$1" in
    #     (-C) usecc=yess
    #         sortopts=;;
    # esac
    # if (( $+@[hello] ))
    # then echo HaveVarHellohello; fi
    # echo Running
# }

_confluencify() {
   local uploadfile="_Confluence_$1"
   # echo 2&> "Saving html to $uploadfile"
   sed '/^<!-- vim-markdown/,/<!-- vim-markdown/c:toc:
        /details\|summary/d; # remove html tags' $1 > $uploadfile
   echo $uploadfile
}

upload2confluence() {
   local uploadfile=$(_confluencify $1)
   mark -f $uploadfile
   rm $uploadfile
}

testupload2confluence() {
   local uploadfile=$(_confluencify $1)
   local htmlfile="$uploadfile:r.html"
   mark -f $uploadfile --dry-run > $htmlfile
   echo "$htmlfile has been generated"
}

# vim:ft=bash
