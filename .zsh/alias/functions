##### GENERAL #####

h() {
    howdoi "$@" -c -n 5
}

du_sort() {
    du -d 1 --si --all "$1" | sort -h
}

mcd () {
    mkdir "$1"
    cd "$1" || return
}

whichl() {
    lsl -lah "$(which "$1")"
}

mp4compact() {
    ffmpeg -i "$1" -vcodec libx265 -crf 2 "$2"
}

unzipm () {
    unzip "$1" -d $1:r
}

2flac () {
    noext=$1:r
    to=$noext.flac
    ffmpeg -i "$1" -codec:a -o -codec flac "$to"
}

show_mouse_color() {
    if [[ -n $1 ]]; then sleep $1; fi

    scrot --overwrite /tmp/copycolor.png
    eval "$(xdotool getmouselocation --shell)"

    img=$(convert /tmp/copycolor.png -depth 8 -crop 1x1+$X+$Y txt:-)
    color=$(echo $img | grep -om1 '#\w\+')

    xclip -selection clipboard <<< "$color"

    awesome-client "\
    naughty = require(\"naughty\")\
    naughty.notify({\
    title=\"\tHello, wannabe designer\t\t \",\
    text=\"\tYour chosen color: $color\",\
    timeout=10,\
    fg=\"$color\",\
    bg=\"#FFFFFF\",\
    border_width=0,\
    position=\"bottom_middle\"})"
}

_newpassword () {
    bw generate -uln --length 30
}

bwgenpass () {
    _newpassword | ci
}

bwgetpw () {
    bw get password "$1" | ci
}

bwcreate () {
    bw create "$1" "$(echo "$2" | bw encode)"
}

bwcreatenote () {
    bwcreate item "$(bw get template item | jq \
       ".folderId = $(bw get folder Notes | jq .id) | \
        .name = \"$1\" | \
        .notes = \"$(cat "$2")\" | \
        .login = \"\"")"
}

bwcreatesecret () {
    bwcreate item "$(bw get template item | jq \
       ".folderId = $(bw get folder Secrets | jq .id) | \
        .name = \"$1\" | \
        .notes = \"$(base64 -w 0 "$2")\" | \
        .login = \"\"")" | jq
}

bwgetsecret () {
    base64 --decode <(bw get item "$1" | jq '.notes' | tr -d \")
}

bwcreatelogin () {
    pw="$(_newpassword)"
    template="$(bw get template item)"
    bwcreate item "$template | jq \
       ".name = \""$1"\" | \
        .login = {\"username\" = \""$2"\", \"password\" = \""$pw"\"}")"
    echo "$pw" | ci
}

bwsearch () {
    bw list items --search "$1" | jq 'del(.[].login.password)'
}

dadjoke() {
   echo "\
$1$1$1$1$1$1$1$1$1$1$1$1$1$1$1$1$1
$1$2$1$2$1$1$2$1$1$2$1$2$1$1$2$1$1
$1$2$1$2$1$2$1$2$1$2$1$2$1$2$1$2$1
$1$2$2$2$1$2$2$2$1$2$2$2$1$2$2$2$1
$1$2$1$2$1$2$1$2$1$2$1$2$1$2$1$2$1
$1$2$1$2$1$2$1$2$1$2$1$2$1$2$1$2$1
$1$1$1$1$1$1$1$1$1$1$1$1$1$1$1$1$1"
}
dadjoke4sam() {
   echo "\
$1$1$1$1$1$1$1$1$1$1$1$1$1
$1$1$1$2$1$2$1$1$2$1$1$1$1
$1$1$1$2$1$2$1$2$1$2$1$1$1
$1$1$1$2$2$2$1$2$2$2$1$1$1
$1$1$1$2$1$2$1$2$1$2$1$1$1
$1$1$1$2$1$2$1$2$1$2$1$1$1
$1$1$1$1$1$1$1$1$1$1$1$1$1"
}

##### GENERAL TEXT PROCESSING #####
flushright() {
    sed -e :a -e 's/^.\{1,78\}$/ &/;ta'
}

center() {
    ncols=$(( $(tput cols) - 3 ))
    sed  -e :a -e 's/^.\{1,'"$ncols"'\}$/ &/;ta' -e 's/\( *\)\1/\1/'
}

##### CONVERSION BETWEEN FORMATS #####
rst2md() {
    local filename=$1:t
    local naked=$filename:r
    local output=$naked.md
    echo Converting $filename to $output
    pandoc $filename \
        --from rst \
        --to gfm \
        --output $output \
        --standalone \
        --toc \
        --toc-depth 2
}

pandoc2pdf() {
    local filename=$1:t
    local from=$2
    local naked=$filename:r
    local output=$naked.pdf
    echo Converting $filename to $output
    pandoc $filename \
        --from $from \
        --output $output \
        -V geometry:margin=1in \
        --standalone \
        --toc \
        --toc-depth 2 \
        --pdf-engine=xelatex \
        --highlight-style=$HOME/.d/sarastango.theme \
        --variable=documentclass:scrreprt \
        --variable=fontsize:9pt \
        --variable=fontenc:T1 \
        --variable='mainfont:IBM Plex Sans' \
        --variable='monofont:IBM Plex Mono Light' \
        --variable=links-as-notes
}

rst2pdf() {
    pandoc2pdf $1 rst
}

# md2pdf() {
#     pandoc2pdf $1 gfm
# }
md2pdf() {
   local tmp="tmp$1"
   cat $1 | sed '/vim-markdown/,/vim-markdown/d' | # swap toc and remove dropdowns
      sed '/details\|summary/d' > $tmp
   pandoc2pdf $tmp gfm
   rm $tmp
}

ns() {
    notmuch search --sort=oldest-first $1 | tr -d '"' | bat -l msg
}

_with_color () {
    command env \
        LESS_TERMCAP_mb=$(printf "\e[1;32m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;35m") \
        PAGER=/usr/bin/less _NROFF_U=1 "$@"
}

hub () {
    _with_color "$0" "$@"
}
alias git=hub

man () {
    if [[ ! ${#@} == 1 ]]; then
        /usr/bin/man "$@"
        return
    fi

    exists=$(fd "^$1" /usr/share/man -1)
    if [[ -n $exists ]]; then
        _with_color "$0" "$@"
    else
        flag=--help
        if [[ $2 == "long" ]]; then
            flag=--long-help
        fi
        $1 $flag | bat -l man
    fi
}

convertff () {
    input_format=$1:e
    output=$(basename "$1" "$input_format")$2
    echo $output
    ffmpeg -i "$1" "$output"
}

convertbpm () {
    input_format=$1:e
    output=$3
    if [[ -z $output ]]; then
        output=$1
    fi
    ffmpeg -yi "$1" -filter:a "atempo=$2" "$2x$output"
}


svg2png () {
    input=$1
    width=$2
    height=$3
    output=$(basename "$input" .svg).png
    if [[ -n $height ]]; then
        height=$width
    fi
    convert -background transparent -resize ${height}x$width $input $output
}

flacaddpic () {
    flac -f $1 --picture=$2
}

__confluencify() {
  sed '/^<!-- vim-markdown/,/<!-- vim-markdown/d;
       /<\/\?details>\|<\/\?summary>/d; # remove html tags' "$1"
}

upload2confluence() {
   mark -f <(__confluencify "$1") --debug --trace
}

testupload2confluence() {
   uploadfile="_Test_Confluence_$1"
   htmlfile="${uploadfile:r}.html"
   mark -f <(__confluencify "$1") --dry-run > "$htmlfile"
   echo "$htmlfile has been generated"
}

# vim:ft=bash
