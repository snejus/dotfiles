# {{{ Generic
hd() {
    howdoi "$@" -c -n 5
}

du_sort() {
    du -d 1 --si --all "$1" | sort -h
}

mcd () {
    mkdir "$1"
    cd "$1" || return
}

whichl() {
    lsl -lah "$(which "$1")"
}

unzip2folder () {
    unzip "$1" -d "$1:r"
}

ns() {
    notmuch search --sort=oldest-first "$1" | tr -d '"' | bat -l msg
}

flushright() {
    ncols=$(( COLUMNS - 3 ))
    sed -er :a -e "s/^.{1,$ncols}$/ &/;ta"
}

center() {
    ncols=$(( COLUMNS - 3 ))
    sed  -r -e :a -e "s/^.{1,$ncols}$/ &/;ta" -e 's/( +)\1/\1/'
}
# }}}

# {{{ Color
pcolors () {
    line_count=$(( LINES - 1 ))
    if [[ $1 == align ]]; then
        line_count=36
    fi
    color_count=255
    need_cols=$(( (color_count / line_count) + 1 ))
    width=$(( COLUMNS / need_cols - 1 ))
    left_padding=$(( width / 2 + 6 ))
    for (( lineno=1 ; lineno <= $line_count; lineno++ )) do
        line=
        for (( col=0 ; col < $need_cols; col++ )) do
            color=$(( col * line_count + lineno ))
            if (( color <= color_count )) then
                if (( col == 0 )) then
                    padding=$left_padding
                else
                    padding=$width
                fi
                _say "$(tput setaf $color)abc" $padding
            fi
        done
        echo
    done
}

show_mouse_color() {
    if [[ -n $1 ]]; then sleep $1; fi

    scrot --overwrite /tmp/copycolor.png
    eval "$(xdotool getmouselocation --shell)" 2> /dev/null
    img=$(convert /tmp/copycolor.png -depth 8 -crop "1x1+$X+$Y" txt:-)
    color=$(grep -om1 '#\w\+' <<< "$img")
    xclip -selection clipboard <<< $color

    awesome-client "\
    naughty = require('naughty')\
    naughty.notify({\
    title='\tHello, wannabe designer\t\t ',\
    text='\tYou are pointing at: $color',\
    timeout=10,\
    fg='$color',\
    bg='#FFFFFF',\
    border_width=0,\
    position='bottom_middle'})"
}

_with_color () {
    command env \
        LESS_TERMCAP_mb=$(printf "\e[1;32m") \
        LESS_TERMCAP_md=$(printf "\e[1;36m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_uo=$(printf "\e[1;37;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;35m") \
        PAGER=/usr/bin/less _NROFF_U=1 "$@"
}

man () {
    cmd=$1
    if [[ ! ${#@} == 1 ]]; then
        if [[ $cmd =~ ^- ]]; then  # first arg is a flag
            command -p man "$@"
            return
        fi
    fi

    cmd=${cmd/ *}
    _with_color $0 $cmd 2> /dev/null && return
    $cmd --help 2>&1 | bat -l man
}
# }}}

# {{{ Docs conversion
rst2md() {
    filename=$1:t
    naked=$filename:r
    output=$naked.md
    echo Converting "$filename" to "$output"
    pandoc "$filename" \
        --from rst \
        --to gfm \
        --output "$output" \
        --standalone \
        --toc \
        --toc-depth 3
}

pandoc2pdf() {
    filename=$3
    if [[ -z $filename ]]; then
        filename=$1:t
    fi
    from=$2 && shift && shift && shift
    naked=$filename:r
    output=$naked.pdf
    echo Converting "$filename" to "$output"
    pandoc $1 \
        $@ \
        --from $from \
        --output $output \
        -V geometry:margin=1in \
        --standalone \
        --toc \
        --toc-depth 3 \
        --pdf-engine xelatex \
        --highlight-style $HOME/.d/sarastango.theme \
        --variable=documentclass:scrreprt \
        --variable=fontsize:9pt \
        --variable=fontenc:T1 \
        --variable=mainfont:"IBM Plex Sans" \
        --variable=monofont:"Iosevka Fixed Light" \
        --variable=links-as-notes
}

rst2pdf() {
    pandoc2pdf "$1" rst
}

__prepare_md() {
    sed -r '
        # remove vim-markdown TOC
          \/^<!-- vim-markdown/,/<!-- vim-markdown/d;
        # remove details/summary html tags
          /<\/?details>|<\/?summary>/d;' "$1"
}

latex2pdf() {
    pandoc2pdf $1 latex "$1:t"
}

md2pdf() {
    pandoc2pdf <(__prepare_md "$1") gfm "$1:t" --from=markdown+abbreviations+tex_math_single_backslash
}

upload2confluence() {
    mark -f <(__prepare_md "$1")
}

testupload2confluence() {
   uploadfile="_Test_Confluence_$1"
   htmlfile="${uploadfile:r}.html"
   mark -f <(__prepare_md "$1") --dry-run > "$htmlfile"
   echo "$htmlfile has been generated"
}
# }}}

# {{{ Media conversion
ytdl () {
    format=mp3
    [[ -n $2 ]] && format=$2
    youtube-dl -x --audio-format $format -o '%(title)s.%(ext)s' $1
}
convertff () {
    ffmpeg -i $1 $1:r.$2
}

2flac () {
    convertff $1 flac
}

convertbpm () {
    scale=$2
    output=$3
    ffmpeg -y -i $1 -filter:a atempo=$scale ${scale}x${output:=$1}
}

flacaddpic () {
    flac -f $1 --picture $2
}

mp4compact () {
    ffmpeg -i $1 -vcodec libx265 -crf 2 $2
}

convertresize () {
    convert -background transparent -resize $1 $2 $3
}

svg2png () {
    input=$1
    width=$2
    height=$3
    output=$input:r.png
    [[ -n $height ]] && height=$width
    convertresize ${height}x$width $input $output
}
# }}}

wal-tile() {
    # sexy-invisibone
    opts=(-n -b 212733 --saturate 0.6)
    wal "$opts" -i "$@"

    img=$(sed q1 $CACHEDIR/wal/wal)
    resolution=2560x1440
    if ! $(file $img | grep -q $resolution); then
        oldimg=$img
        img=$img:r-fixedres.$img:e
        echo Converting to $img
        convertresize !$resolution $oldimg $img
    fi
    feh --bg-tile $img
}

# vim:ft=zsh
