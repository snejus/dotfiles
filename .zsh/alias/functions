# {{{ Generic
h() {
    howdoi "$@" -c -n 5
}

du_sort() {
    du -d 1 --si --all "$1" | sort -h
}

mcd () {
    mkdir "$1"
    cd "$1" || return
}

whichl() {
    lsl -lah "$(which "$1")"
}

unzip2folder () {
    unzip "$1" -d "$1:r"
}

ns() {
    notmuch search --sort=oldest-first "$1" | tr -d '"' | bat -l msg
}
# }}}

# {{{ Color
show_mouse_color() {
    if [[ -n $1 ]]; then sleep $1; fi

    scrot --overwrite /tmp/copycolor.png
    eval "$(xdotool getmouselocation --shell)"

    img=$(convert /tmp/copycolor.png -depth 8 -crop 1x1+$X+$Y txt:-)
    color=$(echo $img | grep -om1 '#\w\+')

    xclip -selection clipboard <<< "$color"

    awesome-client "\
    naughty = require(\"naughty\")\
    naughty.notify({\
    title=\"\tHello, wannabe designer\t\t \",\
    text=\"\tYour chosen color: $color\",\
    timeout=10,\
    fg=\"$color\",\
    bg=\"#FFFFFF\",\
    border_width=0,\
    position=\"bottom_middle\"})"
}

_with_color () {
    command env \
        LESS_TERMCAP_mb=$(printf "\e[1;32m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;35m") \
        PAGER=/usr/bin/less _NROFF_U=1 "$@"
}

hub () {
    _with_color "$0" "$@"
}
alias git=hub

man () {
    if [[ ! ${#@} == 1 ]]; then
        /usr/bin/man "$@"
        return
    fi

    exists=$(fd "^$1" /usr/share/man -1)
    if [[ -n $exists ]]; then
        _with_color "$0" "$@"
    else
        flag=--help
        if [[ $2 == "long" ]]; then
            flag=--long-help
        fi
        $1 $flag | bat -l man
    fi
}
# }}}

dadjoke() {
   echo "\
$1$1$1$1$1$1$1$1$1$1$1$1$1$1$1$1$1
$1$2$1$2$1$1$2$1$1$2$1$2$1$1$2$1$1
$1$2$1$2$1$2$1$2$1$2$1$2$1$2$1$2$1
$1$2$2$2$1$2$2$2$1$2$2$2$1$2$2$2$1
$1$2$1$2$1$2$1$2$1$2$1$2$1$2$1$2$1
$1$2$1$2$1$2$1$2$1$2$1$2$1$2$1$2$1
$1$1$1$1$1$1$1$1$1$1$1$1$1$1$1$1$1"
}
dadjoke4sam() {
   echo "\
$1$1$1$1$1$1$1$1$1$1$1$1$1
$1$1$1$2$1$2$1$1$2$1$1$1$1
$1$1$1$2$1$2$1$2$1$2$1$1$1
$1$1$1$2$2$2$1$2$2$2$1$1$1
$1$1$1$2$1$2$1$2$1$2$1$1$1
$1$1$1$2$1$2$1$2$1$2$1$1$1
$1$1$1$1$1$1$1$1$1$1$1$1$1"
}

flushright() {
    ncols=$(( $(tput cols) - 3 ))
    sed -e :a -e "s/^.\{1,$ncols\}$/ &/;ta"
}

center() {
    ncols=$(( $(tput cols) - 3 ))
    sed  -e :a -e "s/^.\{1,$ncols\}$/ &/;ta" -e 's/\( *\)\1/\1/'
}

# {{{ Docs conversion
rst2md() {
    filename=$1:t
    naked=$filename:r
    output=$naked.md
    echo Converting "$filename" to "$output"
    pandoc "$filename" \
        --from rst \
        --to gfm \
        --output "$output" \
        --standalone \
        --toc \
        --toc-depth 2
}

pandoc2pdf() {
    filename=$3
    if [[ -z $filename ]]; then
        filename=$1:t
    fi
    from=$2
    naked=$filename:r
    output=$naked.pdf
    echo Converting "$filename" to "$output"
    pandoc $1 \
        --from "$from" \
        --output "$output" \
        -V geometry:margin=1in \
        --standalone \
        --toc \
        --toc-depth 2 \
        --pdf-engine=xelatex \
        --highlight-style="$HOME/.d/sarastango.theme" \
        --variable=documentclass:scrreprt \
        --variable=fontsize:9pt \
        --variable=fontenc:T1 \
        --variable=mainfont:"Iosevka Fixed" \
        --variable=monofont:"Iosevka Fixed Light" \
        --variable=links-as-notes
}

rst2pdf() {
    pandoc2pdf "$1" rst
}

__prepare_md() {
    sed "/^<!-- vim-markdown/,/<!-- vim-markdown/d; # remove vim-markdown tags
         /<\/\?details>\|<\/\?summary>/d;           # remove details/summary html tags" "$1"
}

md2pdf() {
    pandoc2pdf <(__prepare_md "$1") gfm "$1:t"
}

upload2confluence() {
    mark -f <(__prepare_md "$1")
}

testupload2confluence() {
   uploadfile="_Test_Confluence_$1"
   htmlfile="${uploadfile:r}.html"
   mark -f <(__prepare_md "$1") --dry-run > "$htmlfile"
   echo "$htmlfile has been generated"
}
# }}}

# {{{ Media conversion

ytdl () {
    format=mp3
    if [[ -n $2 ]]; then
        format="$2"
    fi
    youtube-dl -x --audio-format "$format" -o "%(title)s.%(ext)s" "$1"
}
2flac () {
    noext=$1:r
    to=$noext.flac
    ffmpeg -i "$1" -codec:a -o -codec flac "$to"
}

convertff () {
    input_format=$1:e
    output=$(basename "$1" "$input_format")$2
    echo "$output"
    ffmpeg -i "$1" "$output"
}

convertbpm () {
    input_format=$1:e
    output=$3
    if [[ -z $output ]]; then
        output=$1
    fi
    ffmpeg -y -i "$1" -filter:a "atempo=$2" "$2x$output"
}

flacaddpic () {
    flac -f "$1" --picture "$2"
}

mp4compact() {
    ffmpeg -i "$1" -vcodec libx265 -crf 2 "$2"
}

svg2png () {
    input=$1
    width=$2
    height=$3
    output=$(basename "$input" .svg).png
    if [[ -n $height ]]; then
        height=$width
    fi
    convert -background transparent -resize "${height}x$width" "$input" "$output"
}
# }}}

# vim:ft=bash
