function preview_arg() {
    cat <<- EOF
'[[ \$(file --mime {}) =~ binary ]] && echo file ||
(bat --style=numbers --color=always {} || cat {})
2> /dev/null | head -1000'
EOF
}

function preview_window_arg() {
    echo "'right:hidden:wrap'"
}

function mappings_arg() {
    cat <<- EOF
'f3:execute(bat --style=numbers {} || less -f {}),
ctrl-]:toggle-preview,
ctrl-\\:toggle-preview-wrap,
ctrl-d:preview-page-down,
ctrl-u:preview-page-up,
ctrl-a:select-all+accept,
ctrl-y:execute-silent
(echo {+} | xclip | -sel clipboard)'
EOF
}

local misc="--no-mouse --height 60% -1 --reverse --multi --inline-info"
local FD_OPTIONS="--follow --hidden -E \*.html -E .git -E node_modules -E .heroku"

export FZF_DEFAULT_OPTS="--color 16 $misc --preview=$(preview_arg | tr -d  '\n') --preview-window=$(preview_window_arg) --bind=$(mappings_arg | tr -d '\n')"
export FZF_DEFAULT_COMMAND="git ls-files --cached --others --exclude-standard | fd --type f --type l $FD_OPTIONS"

f() {
    sels=( "${(@f)$(fd "${fd_default[@]}" "${@:2}"| fzf)}" )
    test -n "$sels" && print -z -- "$1 ${sels[@]:q:q}"
}

is_in_git_repo() {
    git rev-parse HEAD > /dev/null 2>&1
}

gt() {  # tags
  is_in_git_repo || return
  git tag --sort -version:refname |
    fzf-tmux --multi --preview-window right:70% \
             --preview 'git show --color=always {} | head -'$LINES
}
# A helper function to join multi-line output from fzf
join-lines() {
  local item
  while read item; do
    echo -n "${(q)item} "
  done
}

fzf-down() {
    fzf --height 50% "$@" --border
}

is_in_git_repo() {
    git rev-parse HEAD > /dev/null 2>&1
}

gf() {  # files
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
  cut -c4- | sed 's/.* -> //'
}

gb() {  # branches
    is_in_git_repo || return
    git checkout `git branch -a --color=always | grep -v '/HEAD\s' | sort |
        fzf-down --ansi --multi --tac --preview-window right:70% \
          --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
        sed 's/^..//' | cut -d' ' -f1 |
        sed 's#^remotes/##'`
}

glo() {  # git log
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -'$LINES |
  grep -o "[a-f0-9]\{7,\}"
}

gr() {  # remotes
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf-down --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200' |
  cut -d$'\t' -f1
}

fzf-gt-widget() LBUFFER+=$(gt | join-lines)
zle -N fzf-gt-widget
bindkey '^g^t' fzf-gt-widget

unfunction preview_arg
unfunction preview_window_arg
unfunction mappings_arg

# vim: ft=zsh
