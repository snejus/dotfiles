#!/usr/bin/bash
# Jira
# TODO: Use json for normal lists too, not just dependencies
# TODO: Tidy up all aliases
# TODO: Apply plain style for Done

BLACK='\\\\e[1;40;40m&\\\\e[0m'
RED='\\\\e[1;31m&\\\\e[0m'
RED_IT='\\\\e[1;41m&\\\\e[0m'
GREEN_IT='\\\\e[1;3;38;5;150m&\\\\e[0m'
GREEN='\\\\e[1;38;5;150m&\\\\e[0m'
YELLOW='\\\\e[1;33m&\\\\e[0m'
BLUE='\\\\e[1;34m&\\\\e[0m'
BLUE0='\\\\e[0;34m&\\\\e[0m'
MAGENTA='\\\\e[1;35m&\\\\e[0m'
CYAN='\\\\e[1;36m&\\\\e[0m'
GREY='\\\\e[1;37m&\\\\e[0m'
WHITE='\\\\e[1;38m&\\\\e[0m'
ORANGE='\\\\e[1;38;5;208m&\\\\e[0m'


_colorfilter() {
    sed "1s/Ty.*/$GREEN_IT/;
          s/[A-Z]\+-[0-9]\+/$WHITE/g;
          s/Story/$GREEN/;
          s/Question/$CYAN/;
          s/Task/$BLUE/;
          s/Sub-task/$BLUE0/;
          s/Bug/$RED/;
          s/Incident/$YELLOW/;
          s/Epic/$MAGENTA/;
          s/High\ /$RED/;
          s/Highest/$RED_IT/;
          s/Medium/$ORANGE/;
          s/Backlog/$BLACK/;
          s/To Do/$WHITE/;
          s/Investigating/$YELLOW/;
          s/In Progress/$GREEN/;
          s/Review/$BLUE/;
          s/Testing/$MAGENTA/;
          s/Done/$GREY/" |
            xargs -I{} echo -e {}
}

_position_nicely() {
    sed 's/^/      &/' |  # spacing on the left
    sed '1i \\a' |      # top padding
    sed '$a \\n'        # bottom padding
}

_beautify() {
    sed -n "s/^\(| \+[A-Z].* |\)$/\1/p" |
    tr -s " " |    # multiple spaces -> single space
    tr -d "'" |    # remove single quotes
    sed '2i \\a' | # separation between the headers and the data
    _colorfilter |
    sed 's/| \([A-Z]\)[a-z]\+ \([A-Z]\)[a-z]\+ /| \1\2 /g' |  # make initials
    column -s "|" -t -o "       " |
    _position_nicely
}

_printissues() {
    jira list --template table --query "$1" | _beautify
}

_printepics() {
    jira list --template epic-list --query "$1" | _beautify
}


__ISSUEORDER="ORDER BY status, type ASC, description"
__ORDERING="ORDER BY status DESC, priority DESC, created DESC"
__NOTDONE="resolution=unresolved"
__EPIC="type=Epic"
__MINE="assignee=currentuser()"

jlsea() {
    _printepics "$__EPIC and $__NOTDONE and project=COR $__ORDERING"
}

jlse() {
    _printepics "$__EPIC and $__NOTDONE and $__MINE $__ORDERING"
}

jls() {
    _printissues "$__NOTDONE and $__MINE $__ISSUEORDER"
}

jlsa() {
    _printissues "$__MINE $__ORDERING"
}

jels() {
    jira epic list "$1" | _beautify
}

_to_table() {
    ncols=$(( $(tput cols) - 3 ))
    jq -r '.[] | ({ key: .key}) + { nature: (.links | keys)} + .links[] | flatten | @sh' |
        sed "s/' \+'/'%'/g" |
            column -t -s "%" -T 3 -c $ncols -o '    ' |
            tr -d "'" | _colorfilter | _position_nicely
}

_links () {
    querystart=$1
    jira list --queryfields=issuelinks -t json --query "$querystart $__NOTDONE and $__MINE" |
            jq '[ .issues[] |
                { key, links: .fields.issuelinks[] |
                    { (.type.inward): (.inwardIssue // .outwardIssue |
                        { ticket: (.key + " " + .fields.summary),
                          type: .fields.issuetype.name,
                          priority: .fields.priority.name,
                          status: .fields.status.name } ) } } ]' | _to_table
}

jlselinks () {
    _links 'type = Epic and'
}

jlslinks () {
    _links
}

jtr () {
    jira transition "$1" "$2"
}

jio () {
    xdg-open "$SUBDOMAIN/browse/${1/#[0-9]*/COR-$1}"
}

jfields () {
    jira fields | jq '.[] | [.key, .name]' | bat -l json
}

jshow() {
    jira view "$1" | bat -l yml
}
alias jinfo=jshow
alias jsh=jshow
# vim:ft=bash
