# {{{ Rendering rst / md
alias restme='restview README.rst'  # rST server
alias restshow='restview --css ~/.shed/github.css'

render () {
    ext=$1:e
    if [[ $ext == "md" ]]; then
        grip -b "$1"
    elif [[ $ext == "rest" ]] || [[ $ext == "rst" ]]; then
        restview --css $HOME/.shed/github.css "$1"
    else
        echo "Can't recognise file format"
    fi
    return 0
}
# }}}
###################################
####           PYTHON          ####
###################################

alias py36='pyenv global 3.6.12'
alias py39='pyenv global 3.9.1'
alias pys='pyenv global system'
alias tpd='tool -pkg deps'
alias ipy=ipython

alias ms='make shell'
alias ma='python manage.py'

# Dephell
alias dp='dephell package'

# Poetry
alias vp='vim pyproject.toml'
alias act='source $(poetry env info --path)/bin/activate'
alias deact=deactivate
alias peotry=poetry
alias poa='poetry add -vv'
alias pob='poetry build'
alias psh='poetry shell'
alias pou='poetry update -vv'
alias poi='poetry install -vv'
alias pop='poetry publish -r yopy'
alias pos='poetry show'
alias pov='poetry version'
alias pb='poetry version prerelease'

# Linting
_srcdir() {
    if [[ -n $1 ]]; then
        echo "$1"
    else
        echo "$(dirname $(fd __init__ -1 src))"
    fi
}

lint_pylint() {
    pylint -f colorized $(_srcdir $1)
}

lint_mypy() {
    if [[ -n $1 ]]; then
        src="$1"
    else
        src=$(_srcdir $1)
    fi
    $PIPX_VENVS_PATH/mypy/bin/mypy --sqlite-cache --pretty --show-traceback "$src"
}

lint_flake8() {
    if [[ -n $1 ]]; then
        src="$1"
    else
        src=$(_srcdir)
    fi
    flake8 -j 4 --show-source --benchmark --statistics "$src"
}

cache_purge() {
    remove_file_folder f .coverage $1
    remove_file_folder d __pycache__ $1
    remove_file_folder d .mypy_cache $1
    remove_file_folder d .pytest_cache $1
    remove_file_folder d .eggs $1
    remove_file_folder d build $1
    remove_file_folder d dist $1
    remove_file_folder d "*.egg-info" $1
    echo Finished removing caches
}

remove_file_folder() {
    count=0
    for file in $(find . -name $2 -type $1);
    do
        rm -rf $file $3
    let "count++"
    done
    if [ $count -gt 0 ]; then
        echo "- Removed $count $2"
    fi
}

pydeps() {
    echo "Generating pydeps dependencies graph for $1"
    command pydeps --include-missing --reverse -T png --display feh $1
}

depscirc() {
    echo "Looking for circular dependencies for $1"
    command pydeps --show-cycles $1
}

search_skipped() {
    grep -RIH "$1" tests src \
        | grep -o '^[^:]*' \
        | tee >(wc -l) >(printf $'\n\e[1;36mTOTAL: \e[0m') \
        | sort | uniq -c | sort -nr \
        | sed $'/ tests/s/.*/\e[1;33m&\e[0m/;
                / src/s/.*/\e[1;31m&\e[0m/'
}

skipped_flake() {
    search_skipped 'noqa\|flake8'
}
skipped_pylint() {
    search_skipped 'pylint: \?d'
}
skipped_mypy() {
    search_skipped 'type:\ ignore'
}

skipped_pylint_by_error() {
    grep -RIH 'pylint: \?dis' tests src \
        | sed 's/.*able\ \?=\ \?//' \
        | tr , '\n' \
        | tr -d ' ' \
        | tee >(wc -l) >(printf '\e[1;34mTOTAL: \e[1;35m') \
        | sort | uniq -c | sort -rh
}

compose2plantuml () {
    echo '@startuml'
    compose_plantuml --link-graph \
                     --boundaries \
                     --port_boundaries \
                     --volume_boundaries \
                     --group \
                     --notes $1 2> /dev/null
    echo '@enduml'
}
showuml () {
    naked=$1:r
    pngfile="$naked.png"
    java -jar ~/.shed/puml/plantuml.jar "$1"
    feh "$pngfile"
}

# vim:ft=bash
