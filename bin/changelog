#!/usr/bin/env bash

#   Try finding the changelog of a Python package and render it with glow (markdown) or
#   bat (md and rst), if they are installed.
#
#   Tested with bash and zsh. It isn't POSIX-compatible however.
#
#   $ git clone <gist-url>
#   $ cd changelog
#   $ chmod a+x changelog
#   $ ln -is `realpath changelog` ~/.local/bin/changelog
#
#   USAGE:
#
#       $ changelog <package-name> [-p|--pager] [-P|--plain] [-s|--silent] [-h|--help]
#
#   (or just source the function to your environment)
#
#   It queries PyPi and reads the 'Home-page' field, therefore it depends on libraries
#   to provide correct URLs to their github repos. For those which don't, there's a
#   PROJECTS variable that allows to hard-code the links.
#
#   It uses pypi-cli if it's available (since it works regardless of your environment).
#   If it isn't available, it tries using pip, however this works only if you have the
#   package in your environment. Though, pip works for private packages, while pypi-cli
#   doesn't.
#
#   If the changelog isn't found in the repo, it prints out the README, given it exists.
#
#   If you want to access private repos and increase Github API's rate limits,
#
#       $ export GITHUB_TOKEN=<your github token>
#
#   Would recommend installing glow (go) or bat for pretty output and having
#
#       $ alias clog='changelog'
#

# flake8: https://gitlab.com/pycqa/flake8/-/tree/master/docs/source/release-notes - non-standard
declare -A PROJECTS
# repos that contain CHANG* file in their root (anything that starts with `CHANG`, case-insensitive)
PROJECTS[docker-compose]=docker/compose
PROJECTS[feh]=derf/feh
PROJECTS[fzf]=junegunn/fzf
PROJECTS[httpie]=httpie/httpie
PROJECTS[poetry]=python-poetry/poetry
PROJECTS[prettier]=prettier/prettier

declare -A LINKS
LINKS[markdown]=Python-Markdown/markdown/master/docs/change_log/release-3.3.md
LINKS[djangorestframework]=encode/django-rest-framework/master/docs/community/release-notes.md
LINKS[pytest]=pytest-dev/pytest/master/doc/en/changelog.rst
LINKS[pytz]=stub42/pytz/master/tz/NEWS
LINKS[whitenoise]=evansd/whitenoise/master/docs/changelog.rst
LINKS[factory-boy]=FactoryBoy/factory_boy/master/docs/changelog.rst

VERBOSE=1
PAGER=1
PLAIN=

# {{{ Colors
tput sgr0
RESET="$(tput sgr0)"
BOLD="$(tput bold)"
IT="$(tput sitm)"
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
BLUE="$(tput setaf 4)"
MAGENTA="$(tput setaf 5)"
CYAN="$(tput setaf 6)"
WHITE="$(tput setaf 7)"
GREY="$(tput setaf 15)"

_say () {
    if [[ -n $PLAIN ]]; then
        printf "%$3s" "$2"
    else
        printf "%$3s" "$1$2$RESET"
    fi
}

bold () {
    printf '%s' "$BOLD$*$RESET"
}

red () {
    _say "$BOLD$RED" "$@"
}

green () {
    _say "$BOLD$GREEN" "$@"
}

yellow () {
    _say "$YELLOW" "$@"
}

blue () {
    _say "$BOLD$BLUE" "$@"
}

magenta () {
    _say "$MAGENTA" "$@"
}

cyan () {
    _say "$BOLD$CYAN" "$@"
}

white () {
    _say "$BOLD$WHITE" "$@"
}

grey () {
    _say "$BOLD$GREY" "$@"
}

_stderr () {
    printf >&2 '%s\n' "$*"
}

warning() {
    _stderr "$(bold "$(yellow WARNING:)")" "$1"
}

error() {
    _stderr "$(red ERROR:) $1"
}
# }}}

get() {
    url=$1
    curl -L -s -u "username:$GITHUB_TOKEN" "$(tr -d ' "' <<< "$url")"
}

show() {
# Markdown: glow -> bat -> plain
# Restructured text: bat -> plain
    url="$1"
    if [[ $PLAIN -eq 1 ]]; then
        get "$url"
        return
    fi

    format="rst"
    grep -vq ".rst" <<< "$url" && format="md"
    if [[ $format == "md" ]] && command -v glow &> /dev/null; then
        get "$url" | glow -s dark - && return
    fi

    if command -v bat &> /dev/null; then
        get "$url" | bat -l rst --color always
    else
        get "$url"
    fi
}

render() {
    url=$1

    if [[ $PAGER -eq 0 ]]; then
        show "$url" 1>&2
    else
        printf '%s' "$(show "$url")" | less -R 1>&2
    fi
}

try_with_pypi() {
    pypi info "$pkg" 2> /dev/null | sed -n "/github.com\|pypi/s/.* //p; s/\/tree\/master//"
}

get_homepage() {
    pkg=$1
    if command -v pypi > /dev/null; then
        details=$(try_with_pypi "$pkg")
        if [[ -n $details ]]; then
            printf '%s' "$details"
            return
        fi
        warning "pypi didn't find the package: Trying pip"
    else
        warning "pypi executable not found: Using pip"
    fi

    pip=$BASE_PIP
    if [[ -z $pip ]]; then
        error "\$INTEGRATIONS_PIP is not found in the environment."
        exit 1
    fi
    $pip show "$pkg" 2> /dev/null | sed -n "/Home/s/.*: //p"
}

try_non_github_homepage() {
    curl -s "$1" | grep -oPm1 "github.com/\K[^/]*/[^/\" ]*"
}

get_info_source() {
    repo_name=$1
    url="https://api.github.com/repos/$repo_name/contents"
    repofilelist=$(get "$url" | jq '.[] | [.name, .download_url] | @tsv' 2> /dev/null) || {
        error "Failed to fetch $repo_name github url: $url"
        exit 1
    }

    changelogurl=$(grep -i -oPm1 '(history.*|news.*|chang.*).*\Khttps[^ "]*"' <<< "$repofilelist")
    if [[ -n $changelogurl ]]; then
        printf '%s the changelog\n' "$(green Found)"
        export INFOSOURCE="$changelogurl"
        return
    fi

    warning "Failed to find the changelog in the repository root. Looking for a readme instead."
    readmeurl=$(grep -i -oPm1 "readme.*\Khttps[^\"]*" <<< "$repofilelist")
    if [[ -z $readmeurl ]]; then
        error "$pkg doesn't have a readme"
        exit 1
    fi
    printf '%s the readme\n' "$(green Found)"
    export INFOSOURCE="$readmeurl"
}

changelog() {
    pkg=$1
    printf 'Looking for %s changelog\n' "$(green "$pkg")"
    if [[ -z $GITHUB_TOKEN ]]; then
        warning "GITHUB_TOKEN is not found in the environment"
    fi

    directlink="${LINKS[$pkg]}"
    if [[ -n $directlink ]]; then
        green $'Link to the changelog is already defined\n'
        render "https://raw.githubusercontent.com/$directlink"
        exit 0
    fi

    predefined="${PROJECTS[$pkg]}"
    if [[ -n $predefined ]]; then
        printf '%s the package repo in the defined list\n' "$(green Found)"
        projectname=$predefined
    else
        homepage="$(get_homepage "$pkg")"
        if [[ -z $homepage ]]; then
            error "pip and pypi failed to find the package"
            exit 1
        fi
        projectname="$(sed -n "/github/s/.*\.com\///p" <<< "$homepage")"
        if [[ -z $projectname ]]; then
            green "Home-page: " && echo "$homepage"
            printf 'Sad, the home page is not a Github URL. '
            printf 'Lets just try something quick though ...\n'
            projectname=$(try_non_github_homepage "$homepage")
            if [[ -n $projectname ]]; then
                green $'Bingo\n'
            else
                error "Could not find $pkg github repository. Check out its home page instead: $homepage"
                exit 1
            fi
        fi
    fi
    printf '%s\n' "$(green "Github project:") $projectname"
    get_info_source "$projectname"
    render "$INFOSOURCE"
    exit 0
}

show_help() {
    cat <<-EOF

  $(green changelog) $(yellow "[options]") $(magenta package) $(yellow "[options]")

     $(yellow "-P, --no-pager")    $(grey "# do not page the output")
     $(yellow "    --no-color")    $(grey "# do not apply post-processing (keep it ugly)")
     $(yellow "-h, --help")        $(grey "# display help")

EOF
    exit 0
}

_commandstring () {
    printf '\n  %s\n' "$(bold "$(cyan changelog && yellow " [options]" && magenta " <arg>")")"
}

if test $# -eq 0; then
    show_help
else
    while test $# -ne 0; do
        case $1 in
            -P|--no-pager) PAGER=0 ;;
            --no-color) PLAIN=1 ;;
            # -s|--silent) VERBOSE= ;;
            -h|--help) show_help; exit ;;
            *)
            if [[ -z $pkg ]]; then
                pkg="$1"
            else
                error "Please provide a single package name"
                exit 1
            fi; ;;
        esac
        shift
    done
    [[ -z $pkg ]] && error "Please provide a package name"  && exit 1
    changelog "$pkg"
fi
# vim:ft=sh
