#!/usr/bin/env bash

#   Try finding the changelog of a Python package and render it with glow (markdown) or
#   pygments (md and rst), if they are installed.
#
#   Tested with bash and zsh. It isn't POSIX-compatible however.
#
#   $ git clone <gist-url>
#   $ cd changelog
#   $ chmod a+x changelog
#   $ ln -is `realpath changelog` ~/.local/bin/changelog
#
#   USAGE:
#
#       $ changelog <package-name> [-p|--pager] [-P|--plain] [-s|--silent] [-h|--help]
#
#   (or just source the function to your environment)
#
#   It queries PyPi and reads the 'Home-page' field, therefore it depends on libraries
#   to provide correct URLs to their github repos. For those which don't, there's a
#   PROJECTS variable that allows to hard-code the links.
#
#   It uses pypi-cli if it's available (since it works regardless of your environment).
#   If it isn't available, it tries using pip, however this works only if you have the
#   package in your environment. Though, pip works for private packages, while pypi-cli
#   doesn't.
#
#   If the changelog isn't found in the repo, it prints out the README, given it exists.
#
#   If you want to access private repos and increase Github API's rate limits,
#
#       $ export GITHUB_TOKEN=<your github token>
#
#   Would recommend installing glow (go) and pygments (python) for pretty output and having
#
#       $ alias clog='changelog -p'
#
declare -A PROJECTS
# flake8: https://gitlab.com/pycqa/flake8/-/tree/master/docs/source/release-notes - non-standard
PROJECTS[attrs]="python-attrs/attrs"
PROJECTS[django-filter]="carltongibson/django-filter"
PROJECTS[heroku]="heroku/cli"
PROJECTS[httpie]="httpie/httpie"
PROJECTS[isort]="PyCQA/isort"
PROJECTS[lxml]="lxml/lxml"
PROJECTS[pdoc3]="pdoc3/pdoc"
PROJECTS[poetry]="python-poetry/poetry"
PROJECTS[pygments]="pygments/pygments"
PROJECTS[smart-open]="RaRe-Technologies/smart_open"
PROJECTS[zeep]="mvantellingen/python-zeep"

declare -A LINKS
LINKS[markdown]="Python-Markdown/markdown/master/docs/change_log/release-3.3.md"
LINKS[djangorestframework]="encode/django-rest-framework/master/docs/community/release-notes.md"
LINKS[pip]="pypa/pip/master/NEWS.rst"
LINKS[psycopg2]="psycopg/psycopg2/master/NEWS"
LINKS[psycopg2-binary]="psycopg/psycopg2/master/NEWS"
LINKS[pytest]="pytest-dev/pytest/master/doc/en/changelog.rst"
LINKS[pytz]="stub42/pytz/master/tz/NEWS"
LINKS[wakatime]="wakatime/wakatime/master/HISTORY.rst"
# TODO: Handle NEWS
# TODO: Use default main repo

VERBOSE=1
PIP="$(pass show main-repo-pip)"

good() {
    printf "\e[1;3;32m$1\e[0m"
}

okay() {
    printf "\e[1;33m$1\e[0m"
}

oh() {
    printf "\e[1;31m$1\e[0m"
}

happy() {
    printf "$(good "$1")"
    [[ -n $2 ]] && printf " $2\n" || printf "\n"
}

hmmm() {
    printf >&2 "$(okay WARNING:) $1\n"
}

uhoh() {
    printf >&2 "$(oh ERROR:) $1\n"
}

parse_homepage() {
    sed -n 's/.*\"\?Home-\?page\"\?: //pI' | tr -d '",'
}

try_with_pypi() {
    pypi info "$pkg" | sed -n '/UNKNOWN/!s/^Home page: //pI' 2> /dev/null
}

get_homepage() {
    pkg=$1
    if command -v pypi &> /dev/null; then
        details=$(try_with_pypi "$pkg")
        [[ -n $details ]] && echo "$details" && return
        hmmm "pypi didn't find the package: Trying pip"
    else
        hmmm "pypi executable not found: Using pip"
    fi

    pip=""
    if [[ -n $PIP ]]; then
        pip=$PIP
    else
        pip=pip
    fi
    echo $pip

    details=$($pip show "$pkg")
    [[ -n $details ]] && echo "$details" | parse_homepage
}

get() {
    curl -s -u "username:$GITHUB_TOKEN" "$(echo "$1" | tr -d ' "')"
}

show() {
# Markdown: glow -> pygments -> plain
# Restructured text: pygments -> plain
    url="$1"
    plain=$2
    [[ $plain -eq 1 ]] && get "$url" && return

    format="rst"
    echo "$url" | grep -vq ".rst" && format="md"
    if [[ $format == "md" ]] && command -v glow &> /dev/null; then
        get "$url" | glow -s dark - && return 0
    fi

    if command -v pygmentize &> /dev/null; then
        get "$url" | pygmentize -l "$format" -O style=monokai
    else
        get "$url"
    fi
}

render() {
    url=$1
    pager=$2
    plain=$3

    if [[ $pager -eq 0 ]]; then
        show "$url" $plain 1>&2
    else
        printf "$(show "$url" $plain)" | less -R 1>&2
    fi
}

changelog() {
    pkg=$1
    pager=$2
    plain=$3

    [[ -n $VERBOSE ]] && printf "Looking for $(good "$pkg") changelog\n"
    if [[ -z $GITHUB_TOKEN ]]; then
        hmmm "GITHUB_TOKEN is not found in the environment"
    fi

    directlink="${LINKS[$pkg]}"
    if [[ -n $directlink ]]; then
        [[ -n $VERBOSE ]] && happy "Link to the changelog is already defined"
        render "https://raw.githubusercontent.com/$directlink" $pager $plain
        exit 0
    fi

    predefined="${PROJECTS[$pkg]}"
    if [[ -n $predefined ]]; then
        [[ -n $VERBOSE ]] && printf "$(good Found) the package repo in the defined list\n"
        projectname=$predefined
    else
        homepage="$(get_homepage $pkg)"
        if [[ -z $homepage ]]; then
            uhoh "Pip failed to find the package"
            exit 1
        fi
        [[ -n $VERBOSE ]] && happy "Home-page:" "$homepage"

        pat_projectname='s/^.*hub\.com\/\(.*\/\?\$\?\)/\1/pI'
        projectname=$(echo "$homepage" | sed -n "$pat_projectname")
        if [[ -z $projectname ]]; then
            uhoh "Could not find $pkg github repository. Check out its home page instead: $homepage" && \
            exit 1
        fi
    fi
    [[ -n $VERBOSE ]] && happy "Github project:" "$projectname"

    pat_changelogurl='s/download_url.*\(https.*change.*\),/\1/pI'
    pat_downloadurl='s/download_url.*\(https.*\),/\1/pI'

    changelogurl=$(get "https://api.github.com/repos/$projectname/contents" | sed -n "$pat_changelogurl")
    if [[ -n $changelogurl ]]; then
        [[ -n $VERBOSE ]] && printf "$(good Found) the changelog\n"
        url="$changelogurl"
    else
        hmmm "Failed to find the changelog in the repository root. Looking for a readme instead."
        readmeurl=$(get "https://api.github.com/repos/$projectname/readme" | sed -n "$pat_downloadurl")
        [[ -z $readmeurl ]] && uhoh "❓ $pkg doesn't have a readme❓" && exit 1
        [[ -n $VERBOSE ]] && printf "$(good Found) the readme"
        url="$readmeurl"
    fi
    render "$url" "$pager" "$plain"
    exit 0
}

chill() {
    printf "\e[1;34m$1\e[0m"
}

comment() {
    printf "\e[1;3;90m$1\e[0m"
}
#┌
#├
#├
#└
show_help() {
    cat <<-EOF

  » $(chill changelog) $(okay [options]) $(good package) $(okay [options])

    ╰─ $(okay "-p, --pager")       $(comment "# page the output")
    ╰─ $(okay "-P, --plain")       $(comment "# do not apply post-processing")
    ╰─ $(okay "-s, --silent")      $(comment "# only print errors and the output")
    ╰─ $(okay "-h, --help")        $(comment "# display help")

EOF
    exit 0
}

unhappy_input() {
    uhoh "$1\n"
    chill "    changelog"
    oh " package\n\n"
}

if test $# -eq 0; then
    show_help
else
    pager=0
    plain=0
    pkg=""
    while test $# -ne 0; do
        case $1 in
            -p|--pager) pager=1 ;;
            -P|--plain) plain=1 ;;
            -s|--silent) VERBOSE="" ;;
            -h|--help) show_help; exit ;;
            *)
            if [[ -z $pkg ]]; then
                pkg="$1"
            else
                unhappy_input "Please provide a single package name"
                exit 1
            fi; ;;
        esac
        shift
    done
    [[ -z $pkg ]] && unhappy_input "Please provide a package name"  && exit 1
    changelog "$pkg" $pager $plain
fi
# vim:ft=sh
